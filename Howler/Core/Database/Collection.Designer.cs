//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("Collection", "TrackArtist", "Track", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Howler.Core.Database.Track), "Artist", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Howler.Core.Database.Artist))]
[assembly: EdmRelationshipAttribute("Collection", "TrackAlbum", "Track", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Howler.Core.Database.Track), "Album", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Howler.Core.Database.Album))]
[assembly: EdmRelationshipAttribute("Collection", "AlbumArtist", "Album", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Howler.Core.Database.Album), "Artist", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Howler.Core.Database.Artist))]
[assembly: EdmRelationshipAttribute("Collection", "TrackGenre", "Track", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Howler.Core.Database.Track), "Genre", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Howler.Core.Database.Genre))]

#endregion

namespace Howler.Core.Database
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class CollectionContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new CollectionContainer object using the connection string found in the 'CollectionContainer' section of the application configuration file.
        /// </summary>
        public CollectionContainer() : base("name=CollectionContainer", "CollectionContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new CollectionContainer object.
        /// </summary>
        public CollectionContainer(string connectionString) : base(connectionString, "CollectionContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new CollectionContainer object.
        /// </summary>
        public CollectionContainer(EntityConnection connection) : base(connection, "CollectionContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Track> Tracks
        {
            get
            {
                if ((_Tracks == null))
                {
                    _Tracks = base.CreateObjectSet<Track>("Tracks");
                }
                return _Tracks;
            }
        }
        private ObjectSet<Track> _Tracks;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Artist> Artists
        {
            get
            {
                if ((_Artists == null))
                {
                    _Artists = base.CreateObjectSet<Artist>("Artists");
                }
                return _Artists;
            }
        }
        private ObjectSet<Artist> _Artists;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Album> Albums
        {
            get
            {
                if ((_Albums == null))
                {
                    _Albums = base.CreateObjectSet<Album>("Albums");
                }
                return _Albums;
            }
        }
        private ObjectSet<Album> _Albums;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Genre> Genres
        {
            get
            {
                if ((_Genres == null))
                {
                    _Genres = base.CreateObjectSet<Genre>("Genres");
                }
                return _Genres;
            }
        }
        private ObjectSet<Genre> _Genres;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Tracks EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToTracks(Track track)
        {
            base.AddObject("Tracks", track);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Artists EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToArtists(Artist artist)
        {
            base.AddObject("Artists", artist);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Albums EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToAlbums(Album album)
        {
            base.AddObject("Albums", album);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Genres EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToGenres(Genre genre)
        {
            base.AddObject("Genres", genre);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Collection", Name="Album")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Album : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Album object.
        /// </summary>
        /// <param name="title">Initial value of the Title property.</param>
        /// <param name="artistsHash">Initial value of the ArtistsHash property.</param>
        public static Album CreateAlbum(global::System.String title, global::System.String artistsHash)
        {
            Album album = new Album();
            album.Title = title;
            album.ArtistsHash = artistsHash;
            return album;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                if (_Title != value)
                {
                    OnTitleChanging(value);
                    ReportPropertyChanging("Title");
                    _Title = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Title");
                    OnTitleChanged();
                }
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Disc
        {
            get
            {
                return _Disc;
            }
            set
            {
                OnDiscChanging(value);
                ReportPropertyChanging("Disc");
                _Disc = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Disc");
                OnDiscChanged();
            }
        }
        private Nullable<global::System.Int64> _Disc;
        partial void OnDiscChanging(Nullable<global::System.Int64> value);
        partial void OnDiscChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TotalDiscs
        {
            get
            {
                return _TotalDiscs;
            }
            set
            {
                OnTotalDiscsChanging(value);
                ReportPropertyChanging("TotalDiscs");
                _TotalDiscs = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalDiscs");
                OnTotalDiscsChanged();
            }
        }
        private Nullable<global::System.Int64> _TotalDiscs;
        partial void OnTotalDiscsChanging(Nullable<global::System.Int64> value);
        partial void OnTotalDiscsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MusicBrainzId
        {
            get
            {
                return _MusicBrainzId;
            }
            set
            {
                OnMusicBrainzIdChanging(value);
                ReportPropertyChanging("MusicBrainzId");
                _MusicBrainzId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MusicBrainzId");
                OnMusicBrainzIdChanged();
            }
        }
        private global::System.String _MusicBrainzId;
        partial void OnMusicBrainzIdChanging(global::System.String value);
        partial void OnMusicBrainzIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ArtistsHash
        {
            get
            {
                return _ArtistsHash;
            }
            set
            {
                if (_ArtistsHash != value)
                {
                    OnArtistsHashChanging(value);
                    ReportPropertyChanging("ArtistsHash");
                    _ArtistsHash = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("ArtistsHash");
                    OnArtistsHashChanged();
                }
            }
        }
        private global::System.String _ArtistsHash;
        partial void OnArtistsHashChanging(global::System.String value);
        partial void OnArtistsHashChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Collection", "TrackAlbum", "Track")]
        public EntityCollection<Track> Track
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Track>("Collection.TrackAlbum", "Track");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Track>("Collection.TrackAlbum", "Track", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Collection", "AlbumArtist", "Artist")]
        public EntityCollection<Artist> Artists
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Artist>("Collection.AlbumArtist", "Artist");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Artist>("Collection.AlbumArtist", "Artist", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Collection", Name="Artist")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Artist : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Artist object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        public static Artist CreateArtist(global::System.String name, global::System.Int64 id)
        {
            Artist artist = new Artist();
            artist.Name = name;
            artist.Id = id;
            return artist;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MusicBrainzId
        {
            get
            {
                return _MusicBrainzId;
            }
            set
            {
                OnMusicBrainzIdChanging(value);
                ReportPropertyChanging("MusicBrainzId");
                _MusicBrainzId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MusicBrainzId");
                OnMusicBrainzIdChanged();
            }
        }
        private global::System.String _MusicBrainzId;
        partial void OnMusicBrainzIdChanging(global::System.String value);
        partial void OnMusicBrainzIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Collection", "TrackArtist", "Track")]
        public EntityCollection<Track> Track
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Track>("Collection.TrackArtist", "Track");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Track>("Collection.TrackArtist", "Track", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Collection", "AlbumArtist", "Album")]
        public EntityCollection<Album> Album
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Album>("Collection.AlbumArtist", "Album");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Album>("Collection.AlbumArtist", "Album", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Collection", Name="Genre")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Genre : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Genre object.
        /// </summary>
        /// <param name="name">Initial value of the Name property.</param>
        public static Genre CreateGenre(global::System.String name)
        {
            Genre genre = new Genre();
            genre.Name = name;
            return genre;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Collection", "TrackGenre", "Track")]
        public EntityCollection<Track> Track
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Track>("Collection.TrackGenre", "Track");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Track>("Collection.TrackGenre", "Track", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="Collection", Name="Track")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Track : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Track object.
        /// </summary>
        /// <param name="path">Initial value of the Path property.</param>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="dateAdded">Initial value of the DateAdded property.</param>
        /// <param name="bitrate">Initial value of the Bitrate property.</param>
        /// <param name="playcount">Initial value of the Playcount property.</param>
        /// <param name="size">Initial value of the Size property.</param>
        /// <param name="duration">Initial value of the Duration property.</param>
        /// <param name="channelCount">Initial value of the ChannelCount property.</param>
        /// <param name="sampleRate">Initial value of the SampleRate property.</param>
        /// <param name="bitsPerSample">Initial value of the BitsPerSample property.</param>
        /// <param name="tagLibHash">Initial value of the TagLibHash property.</param>
        public static Track CreateTrack(global::System.String path, global::System.Int64 id, global::System.DateTime dateAdded, global::System.Int64 bitrate, global::System.Int64 playcount, global::System.Int64 size, global::System.Int64 duration, global::System.Int64 channelCount, global::System.Int64 sampleRate, global::System.Int64 bitsPerSample, global::System.String tagLibHash)
        {
            Track track = new Track();
            track.Path = path;
            track.Id = id;
            track.DateAdded = dateAdded;
            track.Bitrate = bitrate;
            track.Playcount = playcount;
            track.Size = size;
            track.Duration = duration;
            track.ChannelCount = channelCount;
            track.SampleRate = sampleRate;
            track.BitsPerSample = bitsPerSample;
            track.TagLibHash = tagLibHash;
            return track;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Path
        {
            get
            {
                return _Path;
            }
            set
            {
                OnPathChanging(value);
                ReportPropertyChanging("Path");
                _Path = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Path");
                OnPathChanged();
            }
        }
        private global::System.String _Path;
        partial void OnPathChanging(global::System.String value);
        partial void OnPathChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int64 _Id;
        partial void OnIdChanging(global::System.Int64 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> TrackNumber
        {
            get
            {
                return _TrackNumber;
            }
            set
            {
                OnTrackNumberChanging(value);
                ReportPropertyChanging("TrackNumber");
                _TrackNumber = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TrackNumber");
                OnTrackNumberChanged();
            }
        }
        private Nullable<global::System.Int64> _TrackNumber;
        partial void OnTrackNumberChanging(Nullable<global::System.Int64> value);
        partial void OnTrackNumberChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> Date
        {
            get
            {
                return _Date;
            }
            set
            {
                OnDateChanging(value);
                ReportPropertyChanging("Date");
                _Date = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Date");
                OnDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _Date;
        partial void OnDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> Rating
        {
            get
            {
                return _Rating;
            }
            set
            {
                OnRatingChanging(value);
                ReportPropertyChanging("Rating");
                _Rating = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Rating");
                OnRatingChanged();
            }
        }
        private Nullable<global::System.Int64> _Rating;
        partial void OnRatingChanging(Nullable<global::System.Int64> value);
        partial void OnRatingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateAdded
        {
            get
            {
                return _DateAdded;
            }
            set
            {
                OnDateAddedChanging(value);
                ReportPropertyChanging("DateAdded");
                _DateAdded = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateAdded");
                OnDateAddedChanged();
            }
        }
        private global::System.DateTime _DateAdded;
        partial void OnDateAddedChanging(global::System.DateTime value);
        partial void OnDateAddedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Bitrate
        {
            get
            {
                return _Bitrate;
            }
            set
            {
                OnBitrateChanging(value);
                ReportPropertyChanging("Bitrate");
                _Bitrate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Bitrate");
                OnBitrateChanged();
            }
        }
        private global::System.Int64 _Bitrate;
        partial void OnBitrateChanging(global::System.Int64 value);
        partial void OnBitrateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Playcount
        {
            get
            {
                return _Playcount;
            }
            set
            {
                OnPlaycountChanging(value);
                ReportPropertyChanging("Playcount");
                _Playcount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Playcount");
                OnPlaycountChanged();
            }
        }
        private global::System.Int64 _Playcount;
        partial void OnPlaycountChanging(global::System.Int64 value);
        partial void OnPlaycountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateLastPlayed
        {
            get
            {
                return _DateLastPlayed;
            }
            set
            {
                OnDateLastPlayedChanging(value);
                ReportPropertyChanging("DateLastPlayed");
                _DateLastPlayed = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateLastPlayed");
                OnDateLastPlayedChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateLastPlayed;
        partial void OnDateLastPlayedChanging(Nullable<global::System.DateTime> value);
        partial void OnDateLastPlayedChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Size
        {
            get
            {
                return _Size;
            }
            set
            {
                OnSizeChanging(value);
                ReportPropertyChanging("Size");
                _Size = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Size");
                OnSizeChanged();
            }
        }
        private global::System.Int64 _Size;
        partial void OnSizeChanging(global::System.Int64 value);
        partial void OnSizeChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Codec
        {
            get
            {
                return _Codec;
            }
            set
            {
                OnCodecChanging(value);
                ReportPropertyChanging("Codec");
                _Codec = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Codec");
                OnCodecChanged();
            }
        }
        private global::System.String _Codec;
        partial void OnCodecChanging(global::System.String value);
        partial void OnCodecChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int64> BPM
        {
            get
            {
                return _BPM;
            }
            set
            {
                OnBPMChanging(value);
                ReportPropertyChanging("BPM");
                _BPM = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BPM");
                OnBPMChanged();
            }
        }
        private Nullable<global::System.Int64> _BPM;
        partial void OnBPMChanging(Nullable<global::System.Int64> value);
        partial void OnBPMChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MusicBrainzId
        {
            get
            {
                return _MusicBrainzId;
            }
            set
            {
                OnMusicBrainzIdChanging(value);
                ReportPropertyChanging("MusicBrainzId");
                _MusicBrainzId = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MusicBrainzId");
                OnMusicBrainzIdChanged();
            }
        }
        private global::System.String _MusicBrainzId;
        partial void OnMusicBrainzIdChanging(global::System.String value);
        partial void OnMusicBrainzIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 Duration
        {
            get
            {
                return _Duration;
            }
            set
            {
                OnDurationChanging(value);
                ReportPropertyChanging("Duration");
                _Duration = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Duration");
                OnDurationChanged();
            }
        }
        private global::System.Int64 _Duration;
        partial void OnDurationChanging(global::System.Int64 value);
        partial void OnDurationChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 ChannelCount
        {
            get
            {
                return _ChannelCount;
            }
            set
            {
                OnChannelCountChanging(value);
                ReportPropertyChanging("ChannelCount");
                _ChannelCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ChannelCount");
                OnChannelCountChanged();
            }
        }
        private global::System.Int64 _ChannelCount;
        partial void OnChannelCountChanging(global::System.Int64 value);
        partial void OnChannelCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 SampleRate
        {
            get
            {
                return _SampleRate;
            }
            set
            {
                OnSampleRateChanging(value);
                ReportPropertyChanging("SampleRate");
                _SampleRate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("SampleRate");
                OnSampleRateChanged();
            }
        }
        private global::System.Int64 _SampleRate;
        partial void OnSampleRateChanging(global::System.Int64 value);
        partial void OnSampleRateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int64 BitsPerSample
        {
            get
            {
                return _BitsPerSample;
            }
            set
            {
                OnBitsPerSampleChanging(value);
                ReportPropertyChanging("BitsPerSample");
                _BitsPerSample = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BitsPerSample");
                OnBitsPerSampleChanged();
            }
        }
        private global::System.Int64 _BitsPerSample;
        partial void OnBitsPerSampleChanging(global::System.Int64 value);
        partial void OnBitsPerSampleChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TagLibHash
        {
            get
            {
                return _TagLibHash;
            }
            set
            {
                OnTagLibHashChanging(value);
                ReportPropertyChanging("TagLibHash");
                _TagLibHash = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TagLibHash");
                OnTagLibHashChanged();
            }
        }
        private global::System.String _TagLibHash;
        partial void OnTagLibHashChanging(global::System.String value);
        partial void OnTagLibHashChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Collection", "TrackArtist", "Artist")]
        public EntityCollection<Artist> Artists
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Artist>("Collection.TrackArtist", "Artist");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Artist>("Collection.TrackArtist", "Artist", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Collection", "TrackAlbum", "Album")]
        public Album Album
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("Collection.TrackAlbum", "Album").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("Collection.TrackAlbum", "Album").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Album> AlbumReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Album>("Collection.TrackAlbum", "Album");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Album>("Collection.TrackAlbum", "Album", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("Collection", "TrackGenre", "Genre")]
        public EntityCollection<Genre> Genres
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Genre>("Collection.TrackGenre", "Genre");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Genre>("Collection.TrackGenre", "Genre", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
